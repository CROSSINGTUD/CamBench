name:
  Broken Crypto Field- & Flow-Sensitive True-Positive Case 2

api:
  javax.crypto.KeyGenerator

description:
  The names of a secure (AES) & an insecure cipher (Blowfish) are stored in an object's fields.
  The insecure one is then used to get an instance of the KeyGenerator before the field containing it is re-assigned
  with the name of a secure cipher.

crypto-usage:
  violation: true
  FUM:
    - argument_state/string_format
  location:
    file: main/java/org/cambench/cap/mixedsensitivities/fieldflow/truepositive/brokencrypto/BrokenCrypto2.java
    method: main(String[] args)
    line: 32

    root:
      location:
        file: main/java/org/cambench/cap/mixedsensitivities/fieldflow/truepositive/brokencrypto/BrokenCrypto2.java
        method: main(String[] args)
        line: 28

fix:
  description:
    Replace the insecure algorithm with a secure one (e.g. AES, depending on the algorithm used for the cipher object).
  file: main/java/org/cambench/cap/mixedsensitivities/fieldflow/truepositive/brokencrypto/CorrectedCrypto.java

codemetrics:
  loc: 26
  cc: 1

capabilities:
  - field-sensitivity
  - flow-sensitivity

security:
  issue: true
  issue-description:
    The KeyGenerator is initialized with an insecure algorithm. Since insecure algorithms should not be utilized
    to create cipher objects, they also should not be utilized to create the according keys.